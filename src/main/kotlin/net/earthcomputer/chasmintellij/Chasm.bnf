{
    parserClass = "net.earthcomputer.chasmintellij.ChasmParser"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Chasm"
    psiImplClassSuffix = "Impl"
    psiPackage = "net.earthcomputer.chasmintellij.psi"
    psiImplPackage = "net.earthcomputer.chasmintellij.psi.impl"

    elementTypeHolderClass = "net.earthcomputer.chasmintellij.psi.ChasmTypes"
    elementTypeClass = "net.earthcomputer.chasmintellij.psi.ChasmElementType"
    tokenTypeClass = "net.earthcomputer.chasmintellij.psi.ChasmTokenType"

    psiImplUtilClass = "net.earthcomputer.chasmintellij.psi.impl.ChasmPsiImplUtil"
}

chasmFile ::= skip expression skip <<eof>>

expression ::= lambdaExpression | ternaryPrecedence

lambdaExpression ::= identifier skip LAMBDA skip expression {
pin = 3
extends=expression
implements = "com.intellij.psi.PsiNameIdentifierOwner"
methods=[argumentElement="identifier" getArgumentName nameIdentifier="identifier" getName setName body="expression"]
}

private ternaryPrecedence ::= ternaryExpression | booleanOrPrecedence

ternaryExpression ::= booleanOrPrecedence skip TERNARY skip ternaryPrecedence skip COLON skip ternaryPrecedence {
pin = 3
extends=expression
methods=[condition="expression[0]" trueExpr="expression[1]" falseExpr="expression[2]"]
}

private booleanOrPrecedence ::= booleanAndPrecedence booleanOrExpression?

left booleanOrExpression ::= skip BOOL_OR skip booleanOrPrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private booleanAndPrecedence ::= bitwiseOrPrecedence booleanAndExpression?

left booleanAndExpression ::= skip BOOL_AND skip booleanAndPrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private bitwiseOrPrecedence ::= bitwiseXorPrecedence bitwiseOrExpression?

left bitwiseOrExpression ::= skip BITWISE_OR skip bitwiseOrPrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private bitwiseXorPrecedence ::= bitwiseAndPrecedence bitwiseXorExpression?

left bitwiseXorExpression ::= skip BITWISE_XOR skip bitwiseXorPrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private bitwiseAndPrecedence ::= equalityPrecedence bitwiseAndExpression?

left bitwiseAndExpression ::= skip BITWISE_AND skip bitwiseAndPrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private equalityPrecedence ::= relationalPrecedence equalityExpression?

left equalityExpression ::= skip (EQUAL | NOT_EQUAL) skip equalityPrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private relationalPrecedence ::= shiftPrecedence relationalExpression?

left relationalExpression ::= skip (LESS_THAN | LESS_THAN_EQUAL | GREATER_THAN | GREATER_THAN_EQUAL) skip relationalPrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private shiftPrecedence ::= additivePrecedence shiftExpression?

left shiftExpression ::= skip (SHIFT_LEFT | SHIFT_RIGHT | SHIFT_RIGHT_UNSIGNED) skip shiftPrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private additivePrecedence ::= multiplicativePrecedence additiveExpression?

left additiveExpression ::= skip (PLUS | MINUS) skip additivePrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private multiplicativePrecedence ::= unaryPrecedence multiplicativeExpression?

left multiplicativeExpression ::= skip (MULTIPLY | DIVIDE | MODULO) skip multiplicativePrecedence {
pin = 2
extends=expression
implements="net.earthcomputer.chasmintellij.psi.ChasmBinaryExpression"
methods=[left="expression[0]" right="expression[1]"]
}

private unaryPrecedence ::= unaryExpression | argumentPrecedence

unaryExpression ::= (PLUS | MINUS | NOT | INVERT) skip unaryPrecedence {
pin = 1
extends=expression
methods=[getOperator operand="expression"]
}

private argumentPrecedence ::= primaryExpression argumentExpression?

private argumentExpression ::= (callExpression | indexExpression | memberExpression)*

left callExpression ::= skip LPAREN skip bracketsBody skip RPAREN {
pin = 2
extends=expression
methods=[function="expression[0]" argument="expression[1]"]
}

left indexExpression ::= skip LBRACKET skip bracketsBody skip RBRACKET {
pin = 2
extends=expression
methods=[owner="expression[0]" index="expression[1]"]
}

left memberExpression ::= skip DOT skip identifier {
pin = 2
extends=expression
methods=[owner="expression[0]" memberNameElement="identifier" getMemberName getReference]
}

private primaryExpression ::= literalExpression | referenceExpression | parenthesesExpression | listExpression | mapExpression

literalExpression ::= NULL | BOOL | FLOAT | INTEGER | (QUOTE (UNESCAPED_STRING | ESCAPED_STRING)* QUOTE) | (SINGLE_QUOTE (UNESCAPED_STRING | ESCAPED_STRING) SINGLE_QUOTE) {
pin = 1
extends=expression
implements=["com.intellij.psi.ContributedReferenceHost"]
methods=[getReferences getValue]
}

referenceExpression ::= DOLLAR? identifier {
pin = 2
extends=expression
methods=[referenceElement="identifier" getReferenceName getReference isGlobal]
}

private bracketsBody ::= expression {
recoverWhile = bracketsRecover
}
private bracketsRecover ::= !(RPAREN | RBRACE | RBRACKET)

private listBracketsBody ::= expression {
recoverWhile = listBracketsRecover
}
private listBracketsRecover ::= !(RPAREN | RBRACE | RBRACKET | COMMA)

parenthesesExpression ::= LPAREN skip bracketsBody skip RPAREN {
pin = 1
extends=expression
}

listExpression ::= LBRACKET skip (listBracketsBody (skip COMMA skip listBracketsBody)* skip (COMMA skip)?)? RBRACKET {
pin = 1
extends=expression
}

mapExpression ::= LBRACE skip (mapEntry (skip COMMA skip mapEntry)* skip (COMMA skip)?)? RBRACE {
pin = 1
extends=expression
}

mapEntry ::= (literalExpression | identifier) skip COLON skip expression {
pin=1
implements = "com.intellij.psi.PsiNameIdentifierOwner"
methods = [keyIdentifier="identifier" getKeyLiteral getKeyElement nameIdentifier="identifier" getKey getName setName getValue]
recoverWhile = mapEntryRecover
}
private mapEntryRecover ::= !(COMMA | RBRACE | RPAREN | RBRACKET)

identifier ::= IDENT | (BACKTICK (ESCAPED_STRING | IDENT)* BACKTICK) {
methods = [getValue]
}

private skip ::= (SKIP | comment | docComment)*

comment ::= LINE_COMMENT+ | (COMMENT_INLINE_START INLINE_COMMENT* COMMENT_INLINE_END ) {
implements = "com.intellij.psi.PsiComment"
methods = [getTokenType]
}

docComment ::= DOC_COMMENT+ | (DOC_COMMENT_INLINE_START DOC_COMMENT* DOC_COMMENT_INLINE_END) {
implements = "com.intellij.psi.PsiDocCommentBase"
elementType = "DOC_COMMENT_ELEMENT"
methods = [getTokenType getOwner]
}
